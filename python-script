from rockset import *
from rockset.models import *
import time
import json
import os

# Initialize the client
# Set the API Keys as environmental variables in the shell via:
# export ROCKET_API_KEY='<insert key here>' and export OPENAI_API_KEY='<insert key here>'
rocksetApiKey = os.getenv("ROCKSET_API_KEY")
apiServerHost = Regions.usw2a1 #ex: rockset.Regions.usw2a1

rs = RocksetClient(host=apiServerHost, api_key=rocksetApiKey)

# Virtual Instance and Workspace parameters
virtualInstanceName = "analytics"
virtualInstanceSize = "XSMALL"
workspaceName = "commons"

# Parameters to create Webhook URLs for suspending and resuming VI
urlPrefix = "https://api.usw2a1.rockset.com/v1/orgs/self/virtualinstances/"
suspendURLsuffix = "/suspend"
resumeURLsuffix = "/resume"

# Parameters to create Scheduled Query Lambda for suspending VI 
suspendVIqueryLambdaName = "auto_suspend_vi"
suspendDescription = "suspend `{virtualInstanceName}` VI"
cronScheduleSuspend = "0 0 * * *" #UNIX cron format for every day at 0 UTC (5pm PT)

# Parameters to create Scheduled Query Lambda for resuming VI 
resumeVIqueryLambdaName = "auto_resume_vi"
resumeDescription = "resume `{virtualInstanceName}` VI"
cronScheduleResume = "0 16 * * *" #UNIX cron format for every day at 16 UTC (9am PT)

webhookAuthorization = "apikey "+rocksetApiKey # 'apikey YOUR_ROCKSET_API_KEY'

# Create a VI given the previously defined parameters
def create_virtual_instance(rs, virtualInstanceName, virtualInstanceSize, mountType="STATIC"):
    try:
        print(f"Creating Virtual Instance `{virtualInstanceName}`...")
        api_response = rs.VirtualInstances.create(
            name=virtualInstanceName,
            mount_type=,
            type=virtualInstanceSize,
        )
        print(api_response)
        print(f"Virtual Instance `{virtualInstanceName}` created!")
    except ApiException as e:
        print("Exception when creating Virtual Instance: %s\n" % json.loads(e.body))

# Returns the Virtual Instance id
def get_vi_id(rs, virtualInstanceName):
    try:
        api_response = rs.VirtualInstances.list(
        )
        vi_list = api_response.data
        for vi in vi_list:
            if vi.get("name") == virtualInstanceName:
                return vi.get("id")
    except ApiException as e:
        print("Exception when getting id for Virtual Instance: %s\n" % json.loads(e.body))
        return None
    
# Create Webhook URLs for suspending and resuming VI given the VI id
def create_webhookURL(urlPrefix, urlSuffix, virtualInstanceId):
    fullURL = urlPrefix+virtualInstanceId+urlSuffix
    return fullURL

# Create a Query Lambda given the previously defined parameters 
def create_query_lambda(rs, workspaceName, queryLambdaName, description):
    description=description
    query = f"""
    SELECT 1
    """

    # Create QL
    try:
        print(f"Creating query lambda `{queryLambdaName}`...")
        api_response = rs.QueryLambdas.create_query_lambda(
            name=queryLambdaName,
            workspace=workspaceName,
            sql=QueryLambdaSql(
                query=query,
            ),
        )
        print(f"Query lambda `{queryLambdaName}` created!")
    except ApiException as e:
        print(f"Exception when creating query lambda: %s\n" % json.loads(e.body))

# Create a schedule to execute the specified QL on
def created_scheduled_ql(rs, workspaceName, queryLambdaName, cronSchedule, webhookURL, webhookAuthorization, numberOfExecutions=1, tagName='latest'):

    try:
        print(f"Creating scheduled query lambda for `{queryLambdaName}`...")
        api_response=rs.ScheduledLambdas.create(
        apikey=rocksetApiKey,
        cron_string=cronSchedule,
        ql_name=queryLambdaName,
        tag=tagName,
        total_times_to_execute=numberOfExecutions, # Comment out for unlimited number of executions.
        webhook_auth_header=webhookAuthorization,
        webhook_payload="{}",
        webhook_url=webhookURL,
        workspace=workspaceName
        )
        print(f"Scheduled query lambda for `{queryLambdaName}` created!")
        print(api_response)
    except ApiException as e:
        print(f"Exception when creating scheduled query lambda: %s\n" % json.loads(e.body))
        
# Returns the Scheduled QL rrn 
def get_scheduled_ql_rrn(rs, scheduledLambdaName, tag="latest"):
    try:
        api_response = rs.ScheduledLambdas.list_org_scheduled_lambdas(
        )
        schedules = api_response.data
        for schedule in schedules:
            if schedule.get("ql_name") == scheduledLambdaName:
                return schedule.get("rrn")
    except ApiException as e:
        print("Exception when getting rnn for Scheduled Query Lambda: %s\n" % json.loads(e.body))
        return None

def clean_up_demo(rs, virtualInstanceName, virtualInstanceId, queryLambdaNames, scheduledQLrrns, max_attempts=10):

    # Deleting Schedules
    for scheduleRRN in scheduledQLrrns:
        try:
            print(f"Deleting schedule `{scheduleRRN}`...")
            api_response = rs.ScheduledLambdas.delete(
    				scheduled_lambda_id=scheduleRRN,
			)
        except ApiException as e:
            print(f"Exception when deleting schedule: %s\n" % json.loads(e.body))

        # Checking if Schedule is deleted
        for attempt in range(max_attempts):
            try:
                api_response = rs.ScheduledLambdas.get(
                    scheduled_lambda_id=scheduleRRN
                )
            except ApiException as e:
                if json.loads(e.body).get("message_key") == 'SCHEDULED_LAMBDA_NOT_FOUND': 
                    print(f'Schedule `{scheduleRRN}` deleted.')
                    break
            time.sleep(30)
  
    # Deleting Query Lambdas
    for queryLambda in queryLambdaNames:
        try:
            print(f"Deleting Query Lambda `{queryLambda}`...")
            api_response = rs.QueryLambdas.delete_query_lambda(
                query_lambda=queryLambda, 
                workspace=workspaceName
            )
        except ApiException as e:
            print(f"Exception when deleting Query Lambda: %s\n" % json.loads(e.body))

        # Checking if Query Lambda ia deleted
        for attempt in range(max_attempts):
            try:
                api_response = rs.QueryLambdas.get_query_lambda_tag_version(
                    query_lambda=queryLambda, 
                    workspace=workspaceName, 
                    tag="latest"
                )
            except ApiException as e:
                if json.loads(e.body).get("message_key") == "QUERY_NOT_FOUND": 
                    print(f"Query Lambda `{queryLambda}` deleted.")
                    break
            time.sleep(30)
    
    # Delete Virtual Instance
    try:
        print(f"Deleting Virtual Instance `{virtualInstanceName}`...")
        api_response = rs.VirtualInstances.delete(
            virtual_instance_id=virtualInstanceId
        )
        # Checking if Virtual Instance is deleted
        for attempt in range(max_attempts):
            try:
                api_response = rs.VirtualInstances.get(
                    virtual_instance_id=virtualInstanceId
                )
            except ApiException as e:
                if json.loads(e.body).get("message_key") == "VIRTUAL_INSTANCE_NOT_FOUND": 
                    print(f"Virtual Instance `{virtualInstanceName}` deleted.")
                    break
            time.sleep(30)
    except ApiException as e:
        print(f"Exception when deleting Virtual Instance: %s\n" % json.loads(e.body))

# Execute once to create VI
create_virtual_instance(rs, virtualInstanceName, virtualInstanceSize)

# Get VI ID and then create webhook URLs     
virtualInstanceID = get_vi_id(rs, virtualInstanceName)
suspendVIurl = create_webhookURL(urlPrefix, suspendURLsuffix, virtualInstanceID)
resumeVIurl = create_webhookURL(urlPrefix, resumeURLsuffix, virtualInstanceID)

# Create Scheduled QL for suspending VI
create_query_lambda(rs, workspaceName, suspendVIqueryLambdaName, suspendDescription)
created_scheduled_ql(rs, workspaceName, suspendVIqueryLambdaName, cronScheduleSuspend, suspendVIurl, webhookAuthorization)

# Create Scheduled QL for resuming VI
create_query_lambda(rs, workspaceName, resumeVIqueryLambdaName, resumeDescription)
created_scheduled_ql(rs, workspaceName, resumeVIqueryLambdaName, cronScheduleResume, resumeVIurl, webhookAuthorization)

# Uncomment to delete the schedules, Query Lambdas, and VI that were created
#virtualInstanceID = get_vi_id(rs, virtualInstanceName)
#suspendQLrrn = get_scheduled_ql_rrn(rs, suspendVIqueryLambdaName)
#resumeQLrrn = get_scheduled_ql_rrn(rs, resumeVIqueryLambdaName)
#clean_up_demo(rs, virtualInstanceName, virtualInstanceID, [suspendVIqueryLambdaName, resumeVIqueryLambdaName], [suspendQLrrn, resumeQLrrn])
